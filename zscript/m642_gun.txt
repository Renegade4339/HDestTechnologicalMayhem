class M642Battery:HDBattery{
	default{
		//$Category "Ammo/Hideous Destructor/"
		//$Title "Disposable M642 Battery"
		//$Sprite "M64BA0"

		hdmagammo.maxperunit 100;
		hdmagammo.roundtype "";
		tag "$TAG_M642BATTERY";
		hdpickup.refid "64b";
		hdpickup.bulk ENC_BATTERY;
		hdmagammo.magbulk ENC_BATTERY;
		hdmagammo.mustshowinmagmanager true;
		inventory.pickupmessage "$PICKUP_M642BATTERY";
		inventory.icon "M64BA0";
		scale 0.4;
	}
	override void doeffect(){
		hdmagammo.doeffect();
	}
	
	override void Consolidate(){}

	override string,string,name,double getmagsprite(int thismagamt){
		string magsprite;
		if(thismagamt>74)magsprite="M64BA0";
		else if(thismagamt>49)magsprite="M64BB0";
		else if(thismagamt>0)magsprite="M64BC0";
		else magsprite="M64BD0";
		return magsprite,"TNTA0","M642Battery",0.8;
	}
	override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDM642");
	}

	override void DrawRoundCount(HDStatusBar sb,HDPlayerPawn hpl,name roundsprite,double scl,int offx,int offy){
		bool helptext=cvar.getcvar("hd_helptext",hpl.player).getbool();
		offx+=40;
		scl=1.6;
		
		sb.DrawString(
			sb.psmallfont,string.format("\cuConsolidating power\n       not available."),
			(offx-32,offy+20),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
			wrapwidth:smallfont.StringWidth("m")*80
		);
	}

	states(actor){
	spawn:
		M64B CAB -1 nodelay{
			if(!mags.size()){destroy();return;}
			int amt=mags[0];
			if(amt>74)frame=0;
			else if(amt>49)frame=1;
		}stop;
	spawnempty:
		M64B D -1;
		stop;
	}
}

class HDM642:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "M642 Rotary Machine Gun"
		//$Sprite "M642A0"

		+hdweapon.hinderlegs
		+weapon.bfg
		obituary "$OB_M642";
		scale 1.1;
		weapon.selectionorder 24;
		weapon.slotnumber 7;
		weapon.slotpriority 1;
		weapon.kickback 30;
		weapon.bobrangex 1.2;
		weapon.bobrangey 1.7;
		weapon.bobspeed 2.1;
		weapon.bobstyle "normal";
		hdweapon.barrelsize 30,3,4;
		inventory.pickupmessage "$PICKUP_M642";
		hdweapon.refid "642";
		scale 0.75;
		tag "$TAG_M642";
		inventory.icon "M642A0";
	}
	override double gunmass(){
		return 21;
	}
	override double weaponbulk(){
		return 318;
	}
	override string,double getpickupsprite(bool usespare){
		return "M642A0",1.;
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Fire the minigun\n"
		..WEPHELP_RELOAD.."  Attach/detach an ammo pack (if worn)\n"
		..WEPHELP_ALTRELOAD.."  Reload battery\n"
		..WEPHELP_USE.." + "..WEPHELP_ALTRELOAD.."  Unload battery"
		;
	}

	override void doeffect(){
		let hdp=hdplayerpawn(owner);
		if(hdp){
			//droop downwards
			if(
				!hdp.gunbraced
				&&!!hdp.player
				&&hdp.player.readyweapon==self
				&&hdp.strength
				&&hdp.pitch<10
			)hdp.A_MuzzleClimb((
				frandom(-0.06,0.06),
				frandom(0.1,clamp(1-pitch,0.08/hdp.strength,0.12))
			),(0,0),(0,0),(0,0));
		}
		super.doeffect();
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
					int nextcellloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("M642Battery")));
			if(nextcellloaded>74){
				sb.drawimage("M64BA0",(-46, -10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextcellloaded>49){
				sb.drawimage("M64BB0",(-46, -10),sb.DI_SCREEN_CENTER_BOTTOM,alpha:1.,scale:(1,1));
			}else if(nextcellloaded>0){
				sb.drawimage("M64BC0",(-46, -10),sb.DI_SCREEN_CENTER_BOTTOM,alpha:1.,scale:(1,1));
			}else sb.drawimage("M64BD0",(-46, -10),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextcellloaded?0.6:1.,scale:(1,1));
			sb.drawnum(hpl.countinv("M642Battery"),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int bffb=hdw.weaponstatus[M642S_BATTERY];
		if(bffb>0)sb.drawwepnum(bffb,100);
		else if(!bffb)sb.drawstring(
			sb.mamountfont,"000000",
			(-16,-7),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_DARKGRAY
		);
		if(weaponstatus[0]&M642F_LINKED)
		sb.drawstring(
			sb.mamountfont," "..weaponstatus[M642S_AMMO],
			(-16,-17),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_YELLOW);
		else sb.drawstring(
			sb.mamountfont,"0",
			(-16,-17),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_DARKGRAY);
		//sb.drawnum(weaponstatus[M642S_AMMO],-16,-17,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_GRAY);
	}

	override void tick(){
		super.tick();
		drainheat(M642S_HEAT,12);
	}

	override inventory CreateTossable(int amt){
		if(!weaponstatus[0]&M642F_LINKED)return super.CreateTossable(amt);
		if(!HDPlayerPawn.CheckStrip(owner,self)&&weaponstatus[0]&M642F_LINKED)return null;

			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return super.CreateTossable(amt);
			pack.bweaponlinked=false;
		//take off the pack when the gun is linked
		HDM642Pack tossed2=HDM642Pack(owner.spawn("HDM642Pack",
			(owner.pos.xy,owner.pos.z+owner.height-20),
			ALLOW_REPLACE
		));
		tossed2.mags.clear();
		tossed2.mags.push(weaponstatus[M642S_AMMO]);
		tossed2.amount=1;
		tossed2.target=owner;
		tossed2.translation=owner.translation;
		HDM642Pack.ArmourChangeEffect(owner,90);
/*
		weaponstatus[M642S_AMMO]=0;
		weaponstatus[0]&=~M642F_LINKED;
*/
			if(weaponstatus[0]&M642F_LINKED){
				HDM642 tossed=HDM642(owner.spawn("HDM642",
			(owner.pos.xy,owner.pos.z+owner.height-32),
			ALLOW_REPLACE
		));
				tossed.weaponstatus[M642S_AMMO]=0;
				tossed.weaponstatus[M642S_BATTERY]=weaponstatus[M642S_BATTERY];
	tossed.weaponstatus[M642B_BARREL]=weaponstatus[M642B_BARREL];
	tossed.weaponstatus[M642S_HEAT]=weaponstatus[M642S_HEAT];
				tossed.weaponstatus[0]&=~M642F_LINKED;
				tossed.vel=owner.vel+(cos(owner.pitch)*(cos(owner.angle),sin(owner.angle)),-sin(owner.pitch)*13);
				tossed.angle=owner.angle;
				tossed.pitch=owner.pitch;
				destroy();
		return tossed;
			}
		return tossed2;
	}

	states{
	select0:
		#### # 0{if(!random(0,2))setweaponstate("select0b");}
		M64G A 0{invoker.weaponstatus[M642B_BARREL]=1;}
		goto select0m642;
	select0b:
		M64G B 0{invoker.weaponstatus[M642B_BARREL]=2;}
		goto select0m642;
	deselect:
		M64G # 0 A_StartDeselect();
	deselect0:
		M64G # 0;
		goto deselect0m642;

	select0m642:
		#### # 3 A_JumpIfInventory("NulledWeapon",1,"select1m642");
		#### # 0 A_TakeInventory("NulledWeapon");
		#### # 1 A_Raise();
		#### # 1 A_Raise(24);
		#### # 1 A_Raise(18);
		#### # 1 A_Raise(12);
		#### ### 1 A_Raise();
		#### # 1 A_Raise(-2);
		#### ## 1 A_Raise(-1);
		#### ## 1{
			A_MuzzleClimb(0.3,0.8);
			A_Raise(-1);
		}
		#### ## 1 A_MuzzleClimb(-0.1,-0.4);
		#### ## 1 A_Raise();
		#### # 1 A_Raise();
		#### # 1 A_Raise(12);
		#### # 1 A_Raise(12);
		wait;
	deselect0m642:
		#### # 0 A_JumpIfHealthLower(1,"deselect1big");
		#### # 0 A_JumpIfInventory("NulledWeapon",1,"deselect1m642");
		#### ## 1 A_Lower(0);
		#### ## 1 A_Lower();
		#### # 1 A_Lower(1);
		#### ## 1 A_Lower(1);
		#### ## 1{
			A_MuzzleClimb(0.3,0.8);
			A_Lower(0);
		}
		#### ## 1{
			A_MuzzleClimb(-0.1,-0.4);
			A_Lower(2);
		}
		#### ###A 1 A_Lower();
		#### # 1 A_Lower(12);
		#### # 1 A_Lower(18);
		#### # 1 A_Lower(18);
		#### # 1 A_Lower(24);
		wait;
	deselect1m642:
		#### ## 1 A_Lower(-2);
		#### # 1 A_Lower(0);
		#### ### 1 A_Lower();
		#### # 1 A_Lower(18);
		#### # 1 A_Lower(18);
		#### # 1 A_Lower(24);
		wait;
	select1m642:
		#### # 0 A_TakeInventory("NulledWeapon");
		#### # 1 A_Raise(36);
		#### # 1 A_Raise(30);
		#### # 1 A_Raise(16);
		#### # 1 A_Raise(12);
		#### # 1{
			A_WeaponOffset(0,-6,WOF_ADD);
			A_MuzzleClimb(-0.1,-1.);
		}
		#### ## 1 A_WeaponOffset(0,2,WOF_ADD);
		#### # 1 A_Raise(1);
		wait;

	ready:
		M64G # 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	fire:
	hold:
		#### # 0{if(invoker.weaponstatus[M642S_BATTERY]<1)setweaponstate("nope");}
		#### # 0{
		if(invoker.weaponstatus[M642B_BARREL]<2)
		setweaponstate("fire2");
		else if(invoker.weaponstatus[M642B_BARREL]>1)
			setweaponstate("fire1");
		}
	fire1:
		#### A 1{
		if(!random(0,56))invoker.weaponstatus[M642S_BATTERY]--;
		A_StartSound("weapons/m642cycle",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		invoker.weaponstatus[M642B_BARREL]=2;
		if(invoker.weaponstatus[M642S_AMMO]<1)return;
		A_GunFlash("flash1");
		}
		#### # 0{if(invoker.weaponstatus[M642S_BATTERY]<1){setweaponstate("postshot1");return;}}
		#### A 0 A_ReFire("fire2");
		goto postshot1;
	fire2:
		#### B 1{
		if(!random(0,56))invoker.weaponstatus[M642S_BATTERY]--;
		A_StartSound("weapons/m642cycle",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		invoker.weaponstatus[M642B_BARREL]=1;
		if(invoker.weaponstatus[M642S_AMMO]<1)return;
		A_GunFlash("flash2");
		}
		#### # 0{if(invoker.weaponstatus[M642S_BATTERY]<1){setweaponstate("postshot2");return;}}
		#### B 0 A_ReFire("fire1");
		goto postshot2;

	postshot1:
		#### BABABBABBB 1 A_StartSound("weapons/m642cycle",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		goto nope;
	postshot2:
		#### ABABAABAAA 1 A_StartSound("weapons/m642cycle",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		goto nope;

	flash1:
		M64F A 0;
		goto flashcommon;
	flash2:
		M64F B 0;
	flashcommon:
		#### # 1{
		HDMobAI.Frighten(self,128);
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			HDFlashAlpha(frandom(128,256));
	A_MuzzleClimb(0,0,-frandom(0.1,0.3),-frandom(0.4,0.8));
			A_ZoomRecoil(0.99);
			A_Light1();
			A_AlertMonsters();
			A_SpawnItemEx("HDFlyingBeltLink",
					cos(pitch)*12,0,height-16-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			double pushforce=frandom(0.001,0.15)*player.crouchfactor;
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
		invoker.weaponstatus[M642S_HEAT]+=3;
		if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
				A_GiveInventory("IsMoving",1);}
			A_SpawnItemEx("HDSpent6mmFlechette",
					cos(pitch)*12,0,height-16-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_StartSound("weapons/m642fire",CHAN_WEAPON,CHANF_OVERLAP,0.65);
		HDBulletActor.FireBullet(self,"HDB_6mmFlechette");
			if(!pack)return;
			pack.ammo--;
				invoker.weaponstatus[M642S_ammo]--;
		}
		stop;

	reload:
		#### # 0{
				if(
					!findinventory("HDM642PackWorn")
				)setweaponstate("nope");
		}
		#### # 1 offset(0,34) A_SetCrosshair(21);
		#### # 1 offset(5,38);
		#### # 1 offset(10,42);
		#### # 2 offset(20,46){
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcbelt",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcshunt",CHAN_WEAPON,CHANF_OVERLAP);
}
		#### # 4 offset(30,52){
			A_MuzzleClimb(0.3,0.4);
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcchamber",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcumag",CHAN_WEAPON,CHANF_OVERLAP);
		}
		#### # 0{
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcopen1",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
}
		#### ## 7 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### # 0{
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcopen1",CHAN_WEAPON,CHANF_OVERLAP);
}
		#### # 6 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### # 7 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### # 10 offset(32,50);
		#### # 3 offset(32,49){
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcumag",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcchamber",CHAN_WEAPON,CHANF_OVERLAP);
}
		#### # 3 offset(30,52);
		#### # 2 offset(20,46);
		#### # 1 offset(10,42);
		#### # 1 offset(5,38);
		#### # 1 offset(0,34);
		#### # 2 offset(3,32){
			A_WeaponBusy();
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED){
			invoker.weaponstatus[M642S_AMMO]=0;
			pack.bweaponlinked=false;
			invoker.bdontdisarm=false;
			}else{
			invoker.weaponstatus[M642S_AMMO]=pack.ammo;
			pack.bweaponlinked=true;
			invoker.bdontdisarm=true;
			}
			invoker.weaponstatus[0]^=M642F_LINKED;
		}
		#### # 3 offset(5,35){
			HDM642PackWorn pack=HDM642PackWorn(FindInventory("HDM642PackWorn"));
			if(!pack)return;
			if(invoker.weaponstatus[0]&M642F_LINKED)
			A_StartSound("weapons/vulcbelt",CHAN_WEAPON,CHANF_OVERLAP);
			else A_StartSound("weapons/vulcshunt",CHAN_WEAPON,CHANF_OVERLAP);
}
		#### # 1 offset(3,32);
		#### # 1 offset(2,31);
		goto nope;

	altreload:
	cellreload:
		M64G # 0{
			int batt=invoker.weaponstatus[M642S_BATTERY];
			if(
				player.cmd.buttons&BT_USE
			){
				invoker.weaponstatus[0]|=M642F_JUSTUNLOAD;
				invoker.weaponstatus[0]|=M642F_LOADCELL;
				setweaponstate("lowertoopen");
				return;
			}else if(
				batt<100
				&&countinv("M642Battery")
			){
				invoker.weaponstatus[0]&=~M642F_JUSTUNLOAD;
				invoker.weaponstatus[0]|=M642F_LOADCELL;
				setweaponstate("lowertoopen");
				return;
			}
			setweaponstate("nope");
		}
	//what key to use for cellunload???
	cellunload:
		M64G # 0{
			//abort if no cell to unload
			if(invoker.weaponstatus[M642S_BATTERY]<0)
			setweaponstate("nope");else{
				invoker.weaponstatus[0]|=M642F_JUSTUNLOAD;
				invoker.weaponstatus[0]|=M642F_LOADCELL;
				setweaponstate("uncell");
			}
		}
	//lower the weapon, open it, decide what to do
	lowertoopen:
		M64G # 2 offset(0,36);
		M64G # 2 offset(4,38){
			A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		M64G # 6 offset(9,41)A_StartSound("weapons/pocket",CHAN_WEAPON);
		M64G # 8 offset(12,43)A_StartSound("weapons/vulcopen1",CHAN_WEAPON,CHANF_OVERLAP);
		M64G # 5 offset(10,41)A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
	uncell:
		M64G # 10 offset(11,42){
			int btt=invoker.weaponstatus[M642S_BATTERY];
			invoker.weaponstatus[M642S_BATTERY]=-1;
			if(btt<0)setweaponstate("cellout");
			else if(
				!PressingUnload()
				&&!PressingAltReload()
				&&!PressingReload()
			){
				A_SetTics(4);
				HDMagAmmo.SpawnMag(self,"M642Battery",btt);
				
			}else{
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				HDMagAmmo.GiveMag(self,"M642Battery",btt);
			}
		}goto cellout;

	cellout:
		M64G # 0 offset(10,40) A_JumpIf(invoker.weaponstatus[0]&M642F_JUSTUNLOAD,"reloadend");
	loadcell:
		M64G # 0{
			let bbb=HDMagAmmo(findinventory("M642Battery"));
			if(bbb)invoker.weaponstatus[M642S_BATTERY]=bbb.TakeMag(true);
		}goto reloadend;

	reloadend:
		M64G # 3 offset(9,41);
		M64G # 2 offset(6,38);
		M64G # 3 offset(2,34);
		goto nope;

	spawn:
		M642 A -1;
		stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[M642S_BATTERY]=100;
	}
}
enum m642status{
	M642F_LINKED=1,
	M642F_JUSTUNLOAD=2,
	M642F_LOADCELL=4,

	M642S_FLAGS=0,
	M642S_AMMO=1,
	M642S_BATTERY=2,
	M642S_HEAT=4,
	
	M642B_BARREL=8,
};