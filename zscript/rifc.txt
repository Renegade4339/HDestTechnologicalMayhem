// ------------------------------------------------------------
// repost if fox cute 
// ------------------------------------------------------------

const RIFC_HACKRANGE=HDCONST_ONEMETRE*7.5;
const RIFC_REMOTERANGE=HDCONST_ONEMETRE*3.5;
class RIFController:HDCellWeapon{
	default{
		+inventory.invbar
		+weapon.wimpy_weapon
		+hdweapon.fitsinbackpack
		+hdweapon.droptranslation
		inventory.icon "RIFCB0";
		inventory.pickupmessage "$PICKUP_RIFC";
		hdweapon.refid "hax";
		tag "$TAG_RIFC";
		Inventory.PickupSound "weapons/pocket";
		weapon.selectionorder 128;
	}
	array<derpbot> derps;
	array<herpbot> herps;
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Hack any D.E.R.P\n"
		..WEPHELP_ALTFIRE.."  Hack any H.E.R.P\n"
		..WEPHELP_ZOOM.." + "..WEPHELP_FIRE.."  Hack any I.E.D\n"
		..WEPHELP_RELOAD.."  Reload battery\n"
		..WEPHELP_UNLOAD.."  Unload battery"
		..(!random(0,16)?"\n\n\nRepost if fox cute!":"")
		;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void initializewepstats(bool idfa){
		weaponstatus[RIFCS_BATTERY]=20;
	}
	override void failedpickupunload(){
		failedpickupunloadmag(RIFCS_BATTERY,"HDBattery");
	}
	override void consolidate(){
		CheckBFGCharge(RIFCS_BATTERY);
	}
	override double gunmass(){
		return 3+(weaponstatus[RIFCS_BATTERY]<0?0:1);
	}
	override double weaponbulk(){
		return 62.220+(weaponstatus[RIFCS_BATTERY]>=0?ENC_BATTERY_LOADED:0);
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawbattery(-54,-4,sb.DI_SCREEN_CENTER_BOTTOM,reloadorder:true);
			sb.drawnum(hpl.countinv("HDBattery"),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int bat=hdw.weaponstatus[RIFCS_BATTERY];
		if(bat>0)sb.drawwepnum(bat,20);
		else if(!bat)sb.drawstring(
			sb.mamountfont,"00000",
			(-16,-9),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_DARKGRAY
		);
	}
	override string,double getpickupsprite(){
		return "RIFC"..((weaponstatus[RIFCS_BATTERY]<0)?"A":"B").."0",1.;
	}
	states{
	select:
		TNT1 A 10{
			if(DoHelpText())A_WeaponMessage(Stringtable.Localize("$RIFC_TEXT"));
}
		TNT1 # 0 A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
		goto super::select;
	deselect:
		TNT1 # 0 A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
		TNT1 A 12;
		goto super::deselect;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALL);
		goto readyend;

	reload:
		TNT1 # 0{
			int batt=invoker.weaponstatus[RIFCS_BATTERY];
			if(
				batt<20
				&&countinv("HDBattery")
			){
				invoker.weaponstatus[0]&=~RIFCF_JUSTUNLOAD;
				invoker.weaponstatus[0]|=RIFCF_LOADCELL;
				setweaponstate("lowertoopen");
				return;
			}
			setweaponstate("nope");
		}
	//what key to use for cellunload???
	unload:
		TNT1 # 0{
			//abort if no cell to unload
			if(invoker.weaponstatus[RIFCS_BATTERY]<0)
			setweaponstate("nope");else{
				invoker.weaponstatus[0]|=RIFCF_JUSTUNLOAD;
				invoker.weaponstatus[0]|=RIFCF_LOADCELL;
				//setweaponstate("uncell");
			}
		}
	//lower the weapon, open it, decide what to do
	lowertoopen:
		TNT1 # 2 offset(0,36);
		TNT1 # 2 offset(4,38){
			A_StartSound("weapons/rifleclick2",CHAN_WEAPON,CHANF_OVERLAP);
		}
		TNT1 # 6 offset(9,41)A_StartSound("weapons/pocket",CHAN_WEAPON);
		TNT1 # 8 offset(12,43)A_StartSound("weapons/vulcopen1",CHAN_WEAPON,CHANF_OVERLAP);
		TNT1 # 5 offset(10,41)A_StartSound("weapons/vulcopen2",CHAN_WEAPON,CHANF_OVERLAP);
	uncell:
		TNT1 # 10 offset(11,42){
			int btt=invoker.weaponstatus[RIFCS_BATTERY];
			invoker.weaponstatus[RIFCS_BATTERY]=-1;
			if(btt<0)setweaponstate("cellout");
			else if(
				!PressingUnload()
				&&!PressingAltReload()
				&&!PressingReload()
			){
				A_SetTics(4);
				HDMagAmmo.SpawnMag(self,"HDBattery",btt);
				
			}else{
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				HDMagAmmo.GiveMag(self,"HDBattery",btt);
			}
		}goto cellout;

	cellout:
		TNT1 # 0 offset(10,40) A_JumpIf(invoker.weaponstatus[0]&RIFCF_JUSTUNLOAD,"reloadend");
	loadcell:
		TNT1 # 0{
			let bbb=HDMagAmmo(findinventory("HDBattery"));
			if(bbb)invoker.weaponstatus[RIFCS_BATTERY]=bbb.TakeMag(true);
		}goto reloadend;

	reloadend:
		TNT1 # 3 offset(9,41);
		TNT1 # 2 offset(6,38);
		TNT1 # 3 offset(2,34);
		goto nope;

	uhoh:
		TNT1 A 0 A_WeaponMessage(" ",10);
		goto nope;
	fire:
		TNT1 A 0{if(invoker.weaponstatus[RIFCS_BATTERY]<1)setweaponstate("nope");}
		TNT1 A 0 A_JumpIf(pressingzoom(),"hackied");
	hackderp:
		---- A 5 A_Log(Stringtable.Localize("$RIFC_FETCHDERPS"),true);
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1;
		---- AAAAAAAAAAAAAA 1{if(invoker.weaponstatus[RIFCS_BATTERY]<1){setweaponstate("uhoh");return;}A_WeaponMessage("\cj"..random(10000,99999).." "..random(10000,99999),10);if(!random(0,24))invoker.weaponstatus[RIFCS_BATTERY]--;}
		---- A 0{
			if(random(0,7))invoker.HackNearbyDerps();
			A_StartSound("rifc/beep",CHAN_WEAPON);
		}
		goto nope;

	hackied:
		---- A 5 A_Log(Stringtable.Localize("$RIFC_FETCHIEDS"),true);
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1;
		---- AAAAAAAAAAAAAA 1{if(invoker.weaponstatus[RIFCS_BATTERY]<1){setweaponstate("uhoh");return;}A_WeaponMessage("\cj"..random(100,999).." "..random(100,999),10);if(!random(0,24))invoker.weaponstatus[RIFCS_BATTERY]--;}
		---- A 0{
			if(random(0,7))invoker.HackNearbyIEDs();
			A_StartSound("rifc/beep",CHAN_WEAPON);
		}
		goto nope;

	altfire:
		TNT1 A 0{if(invoker.weaponstatus[RIFCS_BATTERY]<1)setweaponstate("nope");}
	hackherp:
		---- A 5 A_Log(Stringtable.Localize("$RIFC_FETCHHERPS"),true);
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1;
		---- AAAAAAAAAAAAAAAAAAA 1{if(invoker.weaponstatus[RIFCS_BATTERY]<1){setweaponstate("uhoh");return;}A_WeaponMessage("\cj"..random(1000,9999).." "..random(1000,9999),10);if(!random(0,24))invoker.weaponstatus[RIFCS_BATTERY]--;}
		---- A 0{
			if(random(0,3))invoker.HackNearbyHerps();
			A_StartSound("rifc/beep",CHAN_WEAPON);
		}
		goto nope;

	spawn:
		RIFC AB -1 NoDelay{
			if (target&&invoker.weaponstatus[RIFCS_BATTERY]>0)
			{
				translation = target.translation;
				frame = 1;
			}
		}
		Stop;
	}
	//leet
	bool HackNearbyDerps(){
		if(!owner)return false;
		ThinkerIterator derpfinder=thinkerIterator.Create("DERPBot");
		derpbot mo;
		while(mo=DERPBot(derpfinder.Next())){
			if(
				mo.master!=owner
				&&mo.distance3d(owner)<frandom(0.9,1.1)*RIFC_HACKRANGE
				&&!mo.InStateSequence(mo.CurState,mo.ResolveState("Dead"))
			){
				let opponent=mo.master;
				int hackable=0;
				if(mo.checksight(owner))hackable+=2;
				if(
					!opponent
					||opponent.health<1 //for good measure
					||!mo.checksight(opponent)
					||mo.distance3d(opponent)>RIFC_REMOTERANGE
				)hackable+=3;
				if(random(0,hackable)){
					if(opponent){
						let opcon=DERPController(opponent.findinventory("DERPController"));
						if(opcon)opcon.updatederps(false);
						opponent.A_Log(Stringtable.Localize("$RIFC_SABOTAGEDCOMMON1")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_DERPSABOTAGED"),true);
					}
					owner.A_Log(Stringtable.Localize("$RIFC_DERPDISABLED")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED1")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED2"),true);
					mo.cmd=DERP_IDLE;
					mo.A_StartSound("derp/disabled",69420);
					mo.target=null;
					mo.master=null;
					mo.health=-1;
					mo.setstatelabel("dead");
					return true;
				}else{
					mo.target=owner;
					string omghax=Stringtable.Localize("$RIFC_HACKATTEMPTLOCATION")..int(owner.pos.x)+random(-10,10)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(owner.pos.y)+random(-10,10)..Stringtable.Localize("$RIFC_HACKATTEMPTMADE");
					if(opponent)opponent.A_Log(omghax,true);
					else mo.cmd=DERP_PATROL;
					owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
					return false;
				}
			}
		}
		owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
		return false;
	}

	//loot
	bool HackNearbyHerps(){
		if(!owner)return false;
		ThinkerIterator herpfinder=thinkerIterator.Create("HERPBot");
		herpbot mo;
		while(mo=HERPBot(herpfinder.Next())){
			if(
				mo.master!=owner
				&&mo.distance3d(owner)<frandom(0.9,1.1)*RIFC_HACKRANGE
				&&!mo.InStateSequence(mo.CurState, mo.ResolveState("NoPower"))
			){
				let opponent=mo.master;
				int hackable=1;
				if(mo.checksight(owner))hackable+=3;
				if(
					!opponent
					||!mo.checksight(opponent)
					||opponent.health<1 //for good measure
					||mo.distance3d(opponent)>RIFC_REMOTERANGE
				)hackable+=4;
				if(random(0,hackable)){
					if(opponent){
						let opcon=HERPController(opponent.findinventory("HERPController"));
						if(opcon)opcon.updateherps(false);
						opponent.A_Log(Stringtable.Localize("$RIFC_SABOTAGEDCOMMON1")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_HERPSABOTAGED"),true);
					}
	owner.A_Log(Stringtable.Localize("$RIFC_HERPDISABLED")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED1")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED2"),true);
					mo.bmissilemore=false;
					mo.A_StartSound("herp/disabled",69420);
					mo.target=null;
					mo.health=-1;
					mo.master=null;
					mo.setstatelabel("nopower");
					return true;
				}else{
					string omghax=Stringtable.Localize("$RIFC_HACKATTEMPTLOCATION")..int(owner.pos.x)+random(-10,10)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(owner.pos.y)+random(-10,10)..Stringtable.Localize("$RIFC_HACKATTEMPTMADE");
					if(opponent)opponent.A_Log(omghax,true);
					else mo.bmissilemore=true;
					owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
					return false;
				}
			}
		}
		owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
		return false;
	}

	//luwut
	bool HackNearbyIEDs(){
		if(!owner)return false;
		ThinkerIterator iedfinder=thinkerIterator.Create("HDIED");
		hdied mo;
		while(mo=HDIED(iedfinder.Next())){
			if(
				mo.master!=owner
				&&mo.distance3d(owner)<frandom(0.9,1.1)*RIFC_HACKRANGE
				&&mo.bmissilemore
			){
				let opponent=mo.master;
				int hackable=1;
				if(mo.checksight(owner))hackable+=3;
				if(
					!opponent
					||!mo.checksight(opponent)
					||opponent.health<1 //for good measure
					||mo.distance3d(opponent)>RIFC_REMOTERANGE
				)hackable+=4;
				if(random(0,hackable)){
					if(opponent){
						opponent.A_Log(Stringtable.Localize("$RIFC_SABOTAGEDCOMMON1")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_IEDSABOTAGEDENEMY"),true);
					}
	owner.A_Log(Stringtable.Localize("$RIFC_IEDSABOTAGED")..int(mo.pos.x)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED1")..int(mo.pos.y)+random(-100,100)..Stringtable.Localize("$RIFC_DISABLED2"),true);
					if(!random(0,8))mo.setstatelabel("detonate");
						else{
							mo.bmissilemore=false;
							mo.A_StartSound("ied/sabotaged",69420,CHANF_OVERLAP);
							mo.A_StartSound("ied/sabotaged2",69420,CHANF_OVERLAP);
						}
					return true;
				}else{
					string omghax=Stringtable.Localize("$RIFC_HACKATTEMPTLOCATION")..int(owner.pos.x)+random(-10,10)..Stringtable.Localize("$RIFC_SABOTAGEDCOMMON2")..int(owner.pos.y)+random(-10,10)..Stringtable.Localize("$RIFC_HACKATTEMPTMADE");
					if(opponent)opponent.A_Log(omghax,true);
					else mo.bmissilemore=true;
					owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
					return false;
				}
			}
		}
		owner.A_Log(Stringtable.Localize("$RIFC_HACKFAILED"),true);
		return false;
	}
}
enum RIFControllerNums{
	RIFCF_JUSTUNLOAD=2,
	RIFCF_LOADCELL=4,

	RIFCS_FLAGS=0,
	RIFCS_DERPINDEX=1,
	RIFCS_HERPINDEX=2,
	RIFCS_BATTERY=3,
}



