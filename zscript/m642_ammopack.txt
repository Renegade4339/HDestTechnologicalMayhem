class HDM642Pack : HDMagAmmo {
	default {
		//$Category "Items/Hideous Destructor"
		//$Title "M642 Ammo Pack"
		//$Sprite "AMPKD0"
		+Inventory.INVBAR
		+HDPickup.CHEATNOGIVE
		+HDPickup.NOTINPOCKETS
		Inventory.amount 1;
		HDMagammo.maxperunit 2000;
		-hdpickup.fitsinbackpack //bruh.
		+hdpickup.droptranslation //hijo de puta
		hdmagammo.roundtype "HD6mmFlechetteAmmo";
		hdmagammo.roundbulk 0.25;
		HDMagammo.magbulk 100;
		Tag "$TAG_AMMOPACK";
		Inventory.icon "AMPKD0";
		Inventory.pickupmessage "$PICKUP_AMMOPACK";
		scale 1;
	}
	int cooldown;

	override bool isused(){return true;}
	override int getsbarnum(int flags){
		int ms=mags.size()-1;
		if(ms<0)return -3000000;
		return mags[ms]%3000;
	}
	//because it can intentionally go over the maxperunit amount
	override void AddAMag(int addamt){
		if(addamt<0)addamt=2000;
		mags.push(addamt);
		amount=mags.size();
	}
	action void A_WearPack() {
		bool helptext=HDWeapon.CheckDoHelpText(self);
		invoker.syncamount();
		int amo=invoker.mags[invoker.mags.size()-1];
		//if holding use, cycle to next ammo pack. who does this?
		if(!!player&&player.cmd.buttons&BT_USE){
			invoker.mags.insert(0,amo);
			invoker.mags.pop();
			invoker.syncamount();
			return;
		}

		invoker.wornlayer=STRIP_BACKPACK;
		bool intervening=!HDPlayerPawn.CheckStrip(self,invoker,false);
		invoker.wornlayer=0;

		if(intervening){

			//check if it's ONLY the stink layer that's in the way
			invoker.wornlayer=STRIP_BACKPACK+1;
			bool notarmour=!HDPlayerPawn.CheckStrip(self,invoker,false);
			invoker.wornlayer=0;

			if(
				notarmour
				||invoker.cooldown>0
			){
				HDPlayerPawn.CheckStrip(self,self);
			}else invoker.cooldown=10;
			return;
		}

		//and finally put on the actual armour
		HDM642Pack.ArmourChangeEffect(self,100);
		A_GiveInventory("HDM642PackWorn");
		let worn=HDM642PackWorn(FindInventory("HDM642PackWorn"));
		worn.ammo=amo;
		invoker.amount--;
		invoker.mags.pop();

		invoker.WearPackHelpText(self,amo);

		invoker.syncamount();
	}
	override void doeffect(){
		if(cooldown>0)cooldown--;
		if(!amount)destroy();
super.doeffect();
	}

/*
	override void syncamount(){
		if(amount<1){destroy();return;}
		super.syncamount();
		for(int i=0;i<amount;i++){
			mags[i]=min(mags[i],2000);
		}
	}
*/

	override inventory createtossable(int amt){
		let sct=super.createtossable(amt);
		que=true;
		//if(self)checkmega();
		return sct;
	}
	override void beginplay(){
		super.beginplay();
		cooldown=0;
		if(!mags.size())mags.push(2000); //not vital, just sets a default
	}
	override void consolidate(){
		int link=owner.countinv("HD_776BeltLink");
		int flechette=owner.countinv("HD6mmFlechetteAmmo");
		bool somethingisin=owner.findinventory("HDM642PackWorn");
		if(somethingisin)return; //Abort if there's an ammo pack worn. Prioritize it.
		int roundsin=(mags[mags.size()-1]);
		if((roundsin>=2000)||!link||!flechette)return;
		int caninsert=min(flechette,link);
		int didinsert=caninsert;
		if((roundsin<=2000)&&(didinsert>(2000-roundsin)))
			didinsert=2000-roundsin;
	owner.A_TakeInventory("HD6mmFlechetteAmmo",didinsert);
	owner.A_TakeInventory("HD_776BeltLink",didinsert);


		//insert resulting rounds

		mags[mags.size()-1]+=didinsert;

		owner.A_Log(Stringtable.Localize("$M642_RELOADED1")..didinsert..Stringtable.Localize("$M642_RELOADED2"),true);
}
/*
	override double getbulk(){
		syncamount();
		double blk=0;
		for(int i=0;i<amount;i++){
			blk+=100+(mags[i]*0.25);
		}
		return blk;
	}
	override double getbulkonemag(int which){
		return magbulk;
	}
*/
	void WearPackHelpText(actor wearer,double ammo){
		if(!HDWeapon.CheckDoHelpText(wearer))return;
		string opinion="";
		double qual=double(ammo)/2000;
		if(wearer.findinventory("HDM642")){
		if(qual<=0)opinion="$M642_AMOUNT_0";
		else if(qual<0.1)opinion="$M642_AMOUNT_1";
		else if(qual<0.3)opinion="$M642_AMOUNT_3";
		else if(qual<0.6)opinion="$M642_AMOUNT_6";
		else if(qual<0.75)opinion="$M642_AMOUNT_75";
		else if(qual>0.95)opinion="$M642_AMOUNT_95";
		}else opinion="$M642_NOGUN";
		wearer.A_Log(
			Stringtable.Localize("$M642_PUTON")
			..(Stringtable.Localize("$TAG_AMMOPACK"))
			..Stringtable.Localize("$HD_SENTENCEBREAK")
			..Stringtable.Localize(opinion)
		,true);
	}
	override bool BeforePockets(actor other){
		//put on the pack right away
		if(
			other.player
			&&other.player.cmd.buttons&BT_USE
			&&!other.findinventory("HDM642PackWorn")
		){
			wornlayer=STRIP_BACKPACK;
			bool intervening=!HDPlayerPawn.CheckStrip(other,self,false);
			wornlayer=0;

			if(intervening)return false;

			HDM642Pack.ArmourChangeEffect(other,110);
			let worn=HDM642PackWorn(other.GiveInventoryType("HDM642PackWorn"));
			int amo=mags[mags.size()-1];
			worn.ammo=amo;
			WearPackHelpText(other,amo);
			destroy();
			return true;
		}
		return false;
	}
	override void actualpickup(actor other,bool silent){
		cooldown=0;
		if(!other)return;
		int durability=mags[mags.size()-1];
		HDM642Pack aaa=HDM642Pack(other.findinventory("HDM642Pack"));

		if(aaa){
			double totalbulk=1.;
			for(int i=0;i<aaa.mags.size();i++){
				totalbulk+=1.;
			}
			if(totalbulk*hdmath.getencumbrancemult()>3.)return;
		}
		if(!trypickup(other))return;
		aaa=HDM642Pack(other.findinventory("HDM642Pack"));
		aaa.syncamount();
		aaa.mags.insert(0,durability);
		aaa.mags.pop();
		other.A_StartSound(pickupsound,CHAN_AUTO);
		HDPickup.LogPickupMessage(other,pickupmessage());
	}
	static void ArmourChangeEffect(actor owner,int delay=25){
		owner.A_StartSound("weapons/m642packequip",CHAN_BODY);
		owner.vel.z+=1.;
		let onr=HDPlayerPawn(owner);
		if(onr){
			onr.stunned+=45;
			onr.striptime=delay;
			onr.AddBlackout(256,96,128);
		}else owner.A_SetBlend("00 00 00",1,6,"00 00 00");
	}

	override string,string,name,double getmagsprite(int thismagamt){
		string magsprite=(thismagamt>0)?"AMPKD0":"AMPKB0";
		return magsprite,"ACRPI3I7","HD6mmFlechetteAmmo",1.0;
	}

	override void detachfromowner(){
		actor oldowner=owner;
		target=oldowner;
		//if(target)setstatelabel("SpawnDropped");
		super.detachfromowner();
	}

	override void DrawRoundCount(HDStatusBar sb,HDPlayerPawn hpl,name roundsprite,double scl,int offx,int offy){
		bool helptext=cvar.getcvar("hd_helptext",hpl.player).getbool();
		offx+=40;
		scl=1.6;
		sb.drawstring(
			sb.pSmallFont,sb.FormatNumber(hpl.countinv(roundtype)),
			(offx+2,offy),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
			font.CR_BROWN
		);
		sb.drawimage(roundsprite,(offx,offy),
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_RIGHT_TOP,
			scale:(scl,scl)
		);
		
		sb.drawstring(
			sb.pSmallFont,sb.FormatNumber(hpl.countinv("HD_776BeltLink")),
			(offx+9,offy+9),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
			font.CR_BROWN
		);
		sb.drawimage("SBKZA0",(offx+7,offy+9),
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_RIGHT_TOP,
			scale:(1.3,1.3)
		);
		
		sb.DrawString(
			sb.psmallfont,string.format("\cuDrop excess belt links\n with the \cqpickup manager\cu."),
			(offx-32,offy+20),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
			wrapwidth:smallfont.StringWidth("m")*80
		);
		
	}

	override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDM642");
	}
	//grabbed from Potetobloke's BaM, specifically the 7mm box mag code
	override bool Insert(){
		SyncAmount();
		int mindex=mags.size()-1;
		if(
			mags.size()<1
			||mags[mags.size()-1]>=maxperunit
			||!owner.countinv(roundtype)
			||!owner.countinv("HD_776BeltLink")
		)return false;
		owner.A_TakeInventory(roundtype,1,TIF_NOTAKEINFINITE);
		owner.A_TakeInventory("HD_776BeltLink",1,TIF_NOTAKEINFINITE);
		owner.A_StartSound("weapons/rifleclick2",CHAN_WEAPON);
		mags[mags.size()-1]++;
		
			inserttime=6; //for convenience

		return true;
	}
	
	override bool Extract(){
		SyncAmount();
		if(
			mags.size()<1
			||mags[mags.size()-1]<1
		)return false;
		//Ammo Type 1
		if
		(HDPickup.MaxGive(owner,roundtype,roundbulk)>=1)
		{HDF.Give(owner,roundtype,1);}
		else 
		{HDPickup.DropItem(owner,roundtype,1);}
		//Ammo Type 2
		if(
		HDPickup.MaxGive(owner,"HD_776BeltLink",ENC_12MMBELTLINK)>=1)
		{HDF.Give(owner,"HD_776BeltLink",1);}
		else 
		{HDPickup.DropItem(owner,"HD_776BeltLink",1);}
		
		owner.A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP);
		mags[mags.size()-1]--;
		
		extracttime=1;
		
		return true;
	}
	
	bool que;

	States {
	Spawn:
		AMPK B -1 NoDelay{
			if (invoker.mags[invoker.mags.size()-1]<1)
			{
			invoker.setstatelabel("spawnempty");
			return;
			}
			if (target)
			{
			invoker.setstatelabel("spawndropped");
			return;
			}
		}
		Stop;
	SpawnDropped:
		AMPK # 0;
		AMPK # -1;
		stop;
	SpawnEmpty:
		AMPK # 0{frame=randompick(5,6);}
		AMPK # -1;
		stop;
		Use:
			TNT1 A 0 A_WearPack();
			fail;
	}
}

class HDM642PackWorn:HDWeapon{
	default{
		tag "$TAG_AMMOPACK";
		HDWeapon.wornlayer STRIP_BACKPACK;
		-hdweapon.fitsinbackpack
		+weapon.no_auto_switch
	}
		int ammo;
	override void beginplay(){
		super.beginplay();
		ammo=2000;
	}

	override double weaponbulk(){
		return (100+(ammo*0.25))/2;
	}

	override bool IsBeingWorn() { return true; }

/*
	override void DrawHudStuff(
		hdstatusbar sb,
		hdplayerpawn hpl,
		int hdflags,
		int gzflags
	){
		int currentammo=ammo/4;
		int totalammo=2000/4;
		vector2 coords=
			(hdflags&HDSB_AUTOMAP)?(4,64):
			(85,-4)
		;
		string ammosprite=(bweaponlinked?"AMPKC0":"AMPKD0");
		string ammoback=(bweaponlinked?"AMPKH0":"AMPKE0");
		sb.drawbar(
			ammosprite,ammoback,
			ammo,2000,
			coords,-1,sb.SHADER_VERT,
			gzflags
		);
		sb.drawstring(
			sb.pnewsmallfont,sb.FormatNumber(ammo),
			coords+(10,-7),gzflags|sb.DI_ITEM_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
			Font.CR_DARKGRAY,scale:(0.5,0.5)
		);
	}
*/

	override void consolidate(){
		int link=owner.countinv("HD_776BeltLink");
		int flechette=owner.countinv("HD6mmFlechetteAmmo");
		int roundsin=ammo;
		if((roundsin>=2000)||!link||!flechette)return;
		int caninsert=min(flechette,link);
		int didinsert=caninsert;
		if((roundsin<=2000)&&(didinsert>(2000-roundsin)))
			didinsert=2000-roundsin;
	owner.A_TakeInventory("HD6mmFlechetteAmmo",didinsert);
	owner.A_TakeInventory("HD_776BeltLink",didinsert);


		//insert resulting rounds

		ammo+=didinsert;


		owner.A_Log(Stringtable.Localize("$M642_RELOADED1")..didinsert..Stringtable.Localize("$M642_RELOADED2"),true);
}
			bool bweaponlinked;
	override inventory CreateTossable(int amt){
		if(!HDPlayerPawn.CheckStrip(owner,self))return null;

		//take off the pack
		let tossed=HDM642Pack(owner.spawn("HDM642Pack",
			(owner.pos.xy,owner.pos.z+owner.height-20),
			ALLOW_REPLACE
		));
		tossed.mags.clear();
		tossed.mags.push(ammo);
		tossed.amount=1;
		tossed.target=owner;
		tossed.translation=owner.translation;
		HDM642Pack.ArmourChangeEffect(owner,90);

			HDM642 wep=HDM642(owner.FindInventory("HDM642"));

			if(wep&&wep.weaponstatus[0]&M642F_LINKED){
				HDM642 tossed2=HDM642(owner.spawn("HDM642",
			(owner.pos.xy,owner.pos.z+owner.height-32),
			ALLOW_REPLACE
		));
				tossed2.weaponstatus[M642S_AMMO]=0;
				tossed2.weaponstatus[M642S_BATTERY]=wep.weaponstatus[M642S_BATTERY];
	tossed2.weaponstatus[M642B_BARREL]=wep.weaponstatus[M642B_BARREL];
	tossed2.weaponstatus[M642S_HEAT]=wep.weaponstatus[M642S_HEAT];
				tossed2.weaponstatus[0]&=~M642F_LINKED;
				tossed2.vel=owner.vel+(cos(owner.pitch)*(cos(owner.angle),sin(owner.angle)),-sin(owner.pitch)*13);
				tossed2.angle=owner.angle;
				tossed2.pitch=owner.pitch;
				wep.destroy();
			}
		destroy();
		return tossed;
	}
	actor visualizer;

	override void tick(){
		super.tick();
		if(visualizer){visualizer.stamina=ammo;visualizer.accuracy=bweaponlinked;}
		if(!visualizer){
		AmmopackVisual visual = AmmopackVisual(spawn("AmmopackVisual",owner.pos,ALLOW_REPLACE));
		if(visual){
		visualizer=visual;
		visual.master=owner;
		}
		}
	}

	states{
	spawn:

		TNT1 A 0;
		stop;
	}
}

class AmmopackVisual:IdleDummy{
	override void tick(){
		super.tick();
		if(master&&master.health>0&&master.findinventory("HDM642PackWorn")){
		A_Warp(AAPTR_MASTER, -((master.radius/2)+4),0,master.height-32, 0,
			WARPF_NOCHECKPOSITION);
		bfloorclip=false;
		bnogravity=true;
		translation=master.translation;
		}else{
		destroy();
		}
	}
	states{
	spawn:
		AMPK A 0;
	spawnloop:
		AMPK # 1{
			if(accuracy){
			if(stamina<1)frame=0;
			else frame=2;
			}else{
			if(stamina<1)frame=1;
			else frame=3;
			}
		}
		loop;
	}
}

class M642PackEmpty : HDPickupGiver {
	default {
		inventory.icon "AMPKB0";
		hdpickupgiver.pickuptogive "HDM642Pack";
	}
	
	override void configureactualpickup() {
		let aaa=HDM642Pack(actualitem);
		aaa.mags.clear();
		aaa.mags.push(1);
		aaa.syncamount();
	}
}

class M642PackWorn : HDPickup{

	default {
		-hdpickup.fitsinbackpack
		hdpickup.refid "64p";
		tag "$TAG_AMMOPACK";
		inventory.maxamount 1;
	}

	override void postbeginplay() {
		super.postbeginplay();
		if(owner) {
			for(inventory iii=owner.inv;iii!=null;iii=iii.inv){
				let hdp=hdpickup(iii);
				if(hdp&&hdp.wornlayer==STRIP_BACKPACK)hdp.destroy();
			}
			owner.A_GiveInventory("HDM642PackWorn");
		}
		destroy();
	}
}